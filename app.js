var web3;
if (typeof window.web3 !== "undefined" && typeof window.web3.currentProvider !== "undefined") {
    web3 = new Web3(window.web3.currentProvider);
}

console.log(web3);

var abiJSON = [ { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "owners", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": false, "inputs": [ { "name": "owner", "type": "address" } ], "name": "removeOwner", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": false, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "revokeConfirmation", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "isOwner", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" }, { "name": "", "type": "address" } ], "name": "confirmations", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": false, "inputs": [ { "name": "destination", "type": "address" }, { "name": "send_to", "type": "address" }, { "name": "value", "type": "uint256" }, { "name": "data", "type": "bytes" } ], "name": "submitTransaction", "outputs": [ { "name": "transactionId", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": true, "inputs": [ { "name": "pending", "type": "bool" }, { "name": "executed", "type": "bool" } ], "name": "getTransactionCount", "outputs": [ { "name": "count", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": false, "inputs": [ { "name": "owner", "type": "address" } ], "name": "addOwner", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": true, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "isConfirmed", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "getConfirmationCount", "outputs": [ { "name": "count", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [ { "name": "", "type": "uint256" } ], "name": "transactions", "outputs": [ { "name": "destination", "type": "address" }, { "name": "send_to", "type": "address" }, { "name": "value", "type": "uint256" }, { "name": "data", "type": "bytes" }, { "name": "executed", "type": "bool" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [], "name": "getOwners", "outputs": [ { "name": "", "type": "address[]" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [ { "name": "from", "type": "uint256" }, { "name": "to", "type": "uint256" }, { "name": "pending", "type": "bool" }, { "name": "executed", "type": "bool" } ], "name": "getTransactionIds", "outputs": [ { "name": "_transactionIds", "type": "uint256[]" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "getConfirmations", "outputs": [ { "name": "_confirmations", "type": "address[]" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [], "name": "transactionCount", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": false, "inputs": [ { "name": "_required", "type": "uint256" } ], "name": "changeRequirement", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": false, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "confirmTransaction", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": true, "inputs": [], "name": "MAX_OWNER_COUNT", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": true, "inputs": [], "name": "required", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function", "stateMutability": "view" }, { "constant": false, "inputs": [ { "name": "owner", "type": "address" }, { "name": "newOwner", "type": "address" } ], "name": "replaceOwner", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "constant": false, "inputs": [ { "name": "transactionId", "type": "uint256" } ], "name": "executeTransaction", "outputs": [], "payable": false, "type": "function", "stateMutability": "nonpayable" }, { "inputs": [ { "name": "_owners", "type": "address[]" }, { "name": "_required", "type": "uint256" } ], "payable": false, "type": "constructor", "stateMutability": "nonpayable" }, { "payable": true, "type": "fallback", "stateMutability": "payable" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "sender", "type": "address" }, { "indexed": true, "name": "transactionId", "type": "uint256" } ], "name": "Confirmation", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "sender", "type": "address" }, { "indexed": true, "name": "transactionId", "type": "uint256" } ], "name": "Revocation", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "transactionId", "type": "uint256" } ], "name": "Submission", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "transactionId", "type": "uint256" } ], "name": "Execution", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "transactionId", "type": "uint256" } ], "name": "ExecutionFailure", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "sender", "type": "address" }, { "indexed": false, "name": "value", "type": "uint256" } ], "name": "Deposit", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "owner", "type": "address" } ], "name": "OwnerAddition", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "name": "owner", "type": "address" } ], "name": "OwnerRemoval", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "required", "type": "uint256" } ], "name": "RequirementChange", "type": "event" } ];
var byteCode = "";

var MyContract = web3.eth.contract(abiJSON);

function createContract() {

    var myAddress = web3.eth.accounts[0];
    var ca1 = document.getElementById('ca1').value;
    var ca2 = document.getElementById('ca2').value;

    if (!ca1 || !ca2) {
       alert("please enter at least 2 addresses");
       return;
    }
    // else{
    //   if(!isAddress(ca1)){
    //     alert('address one is invalid format');
    //     return;
    //   }
    //
    //   if(!isAddress(ca2)){
    //     alert('address second is invalid format');
    //     return;
    //   }
    // }

    if (!myAddress) {
        alert("unlock metamask!");
        return;
    }

    var owners = [myAddress, ca1, ca2];
    var req_signer= document.getElementById('req').value;

    MyContract.new(owners,req_signer, {
        from: myAddress,
        data: byteCode,
        gas: 4000000
    }, function (err, myContract) {
        console.log(err, myContract)
        if (!err) {
            // NOTE: The callback will fire twice!
            // Once the contract has the transactionHash property set and once its deployed on an address.
            // e.g. check tx hash on the first call (transaction send)
            if (!myContract.address) {
                console.log(myContract.transactionHash) // The hash of the transaction, which deploys the contract
                // check address on the second call (contract deployed)
            } else {
                document.getElementById('address').innerHTML = myContract.address;
                console.log(myContract.address) // the contract address
            }
        }
    });
}

function submitTransaction() {
      var ca = document.getElementById('st_ca').value;
      var da = document.getElementById('st_da').value;
      var atm = document.getElementById('st_atm').value;

      var myAddress = web3.eth.accounts[0];

      if (!ca || !da || !atm) {
         alert("please enter valid data!");
         return;
      }
      if (!myAddress) {
         alert("unlock the metamask");
         return;
      }

      document.getElementById('cst_info').innerHTML = "please wait for tx to confirm:";

      var _tokenContract = web3.eth.contract(abiJSON).at(ca);

      _tokenContract.submitTransaction.sendTransaction("0xaa6ffff26c5cd43a011385f1c94b95a17b678857",da, atm, "", {
          from: myAddress,
          gas: 400000
        }, function (err, result) {
          if (err != null) {
            alert(err);
	    } else {
	    var myEvent = _tokenContract.Submission({},{fromBlock: 0, toBlock: 'latest'});
	    myEvent.watch(function(error, result) {
		if (err) {
                   return;
                }
                var id = result.args.transactionId.c[0];
	        console.log(error, result);
	        document.getElementById('cst_info').innerHTML = "last submitted tx id is (it might take sometime to get latest submitted tx id please wait): " + id;
	    });
	    }
       });
}

function confirmTransaction() {
      var ct_ca = document.getElementById('ct_ca').value;
      var myAddress = web3.eth.accounts[0];
      var tID = document.getElementById('tID').value;

      if (!ct_ca || !tID) {
         alert("please enter valid data!");
         return;
      }
      if (!myAddress) {
         alert("unlock the metamask");
         return;
      }

      var _tokenContract = web3.eth.contract(abiJSON).at(ct_ca);
      _tokenContract.confirmTransaction.sendTransaction(tID, {
          from: myAddress,
          gas: 400000
        }, function (err, result) {
          if (err != null) {
            alert(err);
          } else {
          }
      });
}
// var accounts = new Accounts('ws://localhost:8546');
function createAccount() {
   var myAddress = web3.eth.accounts;
   console.log(myAddress,"-------")
   var defaultAccount = web3.eth.defaultAccount;
console.log(defaultAccount);
var balance = web3.eth.getBalance("0x4b7e34384b6656ccbb8a99594a599cf4dbe6350d",function(error, result){
    if(!error)
        console.log(JSON.stringify(result));
    else
        console.error(error);
});
var balance = web3.eth.accounts.sign("0x4b7e34384b6656ccbb8a99594a599cf4dbe6350d",function(error, result){
    if(!error)
        console.log(JSON.stringify(result));
    else
        console.error(error);
});
}
var isAddress = function (address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        // check if it has the basic requirements of an address
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        // If it's all small caps or all all caps, return true
        return true;
    } else {
        // Otherwise check each case
        return isChecksumAddress(address);
    }
};

/**
 * Checks if the given string is a checksummed address
 *
 * @method isChecksumAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isChecksumAddress = function (address) {
    // Check each case
    address = address.replace('0x','');
    var addressHash = sha3(address.toLowerCase());
    for (var i = 0; i < 40; i++ ) {
        // the nth letter should be uppercase if the nth digit of casemap is 1
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;
        }
    }
    return true;
};
